#!/usr/bin/env node
var fs = require('fs'),
    path = require('path'),
    Glue = require('../index.js'),
    Minilog = require('minilog');

var opts = require('optimist')
    .usage('Usage: $0 --include <file/dir ...> --out filename.js')
    .options({
      'include': { },
      'exclude': { },
      'out': { },
      'global': { },
      'basepath': { 'default': process.cwd() },
      'main': { 'default': 'index.js' },
      'replace': { },
      'remap': { },
      'source-url': { },
      'global-require': { },
      'amd': { },
      'command': { },
      'cache': { default: true },
      'cache-path': { },
      'jobs': { },
      'silent': { },
      'verbose': { },
      'reset-exclude': { },
      'version': { }
    })
    .boolean('cache')
    .boolean('report'),
    argv = opts.parse(process.argv);

if(argv['version'] || argv['v'] ) {
  console.log(require('../package.json').version);
  process.exit();
}

if(!argv['include']) {
  return fs.createReadStream(__dirname + '/usage.txt').pipe(process.stdout).on('close', function () { process.exit(1) });
}

var g = new Glue();

// --include
g.include(argv['include']);

// --exclude
if(argv['exclude']) {
  g.set('exclude', argv['exclude']);
}

// reset-exclude
if(argv['reset-exclude']) {
  g.set('reset-exclude', true);
}

// --amd
if(argv['amd']) {
  g.set('amd', argv['amd']);
}

// --global
g.export(argv['global']);

// --basepath
g.basepath(argv['basepath']);

// --main
g.main(argv['main'])

// --replace
if(argv['replace']) {
  // allow --replace foo=bar,baz=abc or --replace foo=bar --replace bar=abc
  if(Array.isArray(argv['replace'])) {
    argv['replace'].forEach(function(item) {
      var pos = item.indexOf('='),
          name = item.substring(0, pos),
          value = item.substring(pos+1);
      g.replace(name, value);
    });
  } else {
    argv['replace'].split(',').forEach(function(item) {
      var pos = item.indexOf('='),
          name = item.substring(0, pos),
          value = item.substring(pos+1);
      g.replace(name, value);
    });
  }

}
if(argv['remap']) {
  (Array.isArray(argv['remap']) ? argv['remap'] : [argv['remap']]).forEach(function(item) {
    var pos = item.indexOf('='),
        name = item.substring(0, pos),
        value = item.substring(pos+1);
    g.remap(name, value);
  });
}

// --silent
// if not explicitly disabled and output is defined
if(!argv['silent'] && argv['out']) {
  g.set('report', true);
}

if(argv['verbose']) {
  g.set('report', true);
  g.set('verbose', true);
}

if(typeof argv['report'] !== 'undefined') {
  g.set('report', argv['report']);
}

if(argv['source-url']) {
  g.set('source-url', true);
}

if(argv['global-require']) {
  g.set('global-require', true);
}

g.set('cache', argv['cache']);

if(argv['cache-path']) {
  g.set('cache-path', path.resolve(process.cwd(), argv['cache-path']));
}

if(argv['cache-method']) {
  g.set('cache-method', argv['cache-method']);
}

if(argv['command']) {
  g.set('command', argv['command']);
}

if(argv['transform']) {
  g.set('transform', argv['transform']);
}

if(argv['jobs']) {
  g.set('jobs', argv['jobs']);
}

if(argv['npm']) {
  process.stderr.write('Warning: the --npm flag is deprecated. ' +
    'Directly include the file path to module, e.g. --include ./node_modules/foo instead.\n');
}

// set this so that builds are invalidates as the version changes
g.set('gluejs-version', require('../package.json').version);

// -- out
if(argv['out']) {
  g.render(fs.createWriteStream(argv['out']));
} else {
  g.render(process.stdout);
}
