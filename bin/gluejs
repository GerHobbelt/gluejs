#!/usr/bin/env node
var fs = require('fs'),
    path = require('path'),
    Glue = require('../index.js');

var argv = require('optimist')
    .usage('Usage: $0 --include <file/dir ...> --out filename.js')
    .options({
      'include': {
        describe: 'Paths to import.'
      },
      'out': {
        describe: 'File to write. Default: stdout'
      },
      'global': {
        describe: 'Name of the global to export. Default: "Foo"',
      },
      'basepath': {
        describe: 'Base path for the list of files. Default: process.cwd().',
        'default': process.cwd()
      },
      'main': {
        describe: 'Name of the main file/module to export. Default: index.js',
        'default': 'index.js'
      },
      'replace': {
        describe: 'Bind require("name") to the expression, e.g. jQuery to window.$.'
      },
      'silent': {
        describe: 'Disable verbose output.'
      },
      'source-url': {
        describe: 'Add source URL annotations to the files. Useful for development, ' +
                  'but note that they are not compatible with IE.'
      },
      'global-require': {
        describe: 'Export the require() implementation into the global space.'
      },
      'command': {
        describe: 'Pipe each file through a shell command and capture the output (e.g. --command "uglifyjs --no-copyright").'
      }
    })
    .demand(['include'])
    .parse(process.argv);

var g = new Glue();

// --include
g.include(argv['include']);

// --global
g.export(argv['global']);

// --basepath
g.basepath(argv['basepath']);

// --main
g.main(argv['main'])

// --replace
if(argv['replace']) {
  // allow --replace foo=bar,baz=abc or --replace foo=bar --replace bar=abc
  if(Array.isArray(argv['replace'])) {
    argv['replace'].forEach(function(item) {
      var parts = item.split('=', 2);
      g.replace(parts[0], parts[1]);
    });
  } else {
    argv['replace'].split(',').forEach(function(item) {
      var parts = item.split('=', 2);
      g.replace(parts[0], parts[1]);
    });
  }
}

// --silent
// if not explicitly disabled and output is defined
if(!argv['silent'] && argv['out']) {
  g.set('report', true);
}

if(argv['command']) {
  g.set('command', argv['command'].split(' '));
}

if(argv['npm']) {
  process.stderr.write('Warning: the --npm flag is deprecated. ' +
    'Directly include the file path to module, e.g. --include ./node_modules/foo instead.\n');
}

// -- out
if(argv['out']) {
  g.render(fs.createWriteStream(argv['out']));
} else {
  g.render(process.stdout);
}
